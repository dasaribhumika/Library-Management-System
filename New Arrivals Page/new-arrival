class NewArrivalScreen extends StatefulWidget {
  final UserModel? userData;
  const NewArrivalScreen({super.key, required this.userData});

  @override
  State<NewArrivalScreen> createState() => _NewArrivalScreenState();
}

class _NewArrivalScreenState extends State<NewArrivalScreen> {
  NewArrivalController newArrivalController = Get.put(NewArrivalController());
  GetBranchesController branchesController = Get.put(GetBranchesController());
  String branchCode = '';
  @override
  void initState() {
    branchesController.selectedBranch = Rx<BranchesModel?>(null);

    if (widget.userData != null) {
      newArrivalController
          .getNewArrivals(widget.userData!.user!.branchCode ?? '');
    } else {
      newArrivalController.getNewArrivals('');
    }

    branchesController.getAllBranches();
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    Size size = MediaQuery.of(context).size;
    return Scaffold(
      appBar: AppBar(
        title: const Text(
          'New Arrivals',
        ),
        actions: <Widget>[
          Obx(
            () => newArrivalController.newArrivals.isNotEmpty
                ? IconButton(
                    icon: Icon(newArrivalController.isGrid.isTrue
                        ? Icons.view_agenda_outlined
                        : Icons.grid_view_outlined),
                    onPressed: () {
                      newArrivalController.toggleViewMode();
                    },
                  )
                : const SizedBox(),
          ),
          IconButton(
              icon: const Icon(Icons.search),
              onPressed: () {
                Navigator.push(
                  context,
                  SlideTransitionToRight(const AllBooksScreen()),
                );
              }),
        ],
        bottom: PreferredSize(
          preferredSize: const Size.fromHeight(1),
          child: Container(
            color: Colors.grey[300],
            height: 1,
          ),
        ),
      ),
      body: Column(
        children: [
          widget.userData == null && branchesController.branches.length > 1
              ? Obx(() {
                  if (branchesController.branchesLoading.isFalse &&
                      branchesController.branches.isNotEmpty) {
                    return Padding(
                      padding: EdgeInsets.symmetric(
                          horizontal: size.width * 0.05,
                          vertical: size.width * 0.02),
                      child: BranchDropdown(
                        hint: "Select Library Branch",
                        onChanged: (value) {
                          branchesController.selectedBranch.value =
                              value as BranchesModel?;
                          newArrivalController
                              .getNewArrivals(value!.branchcode!);
                          setState(() {
                            branchCode = value.branchcode!;
                          });
                        },
                        branches: branchesController.branches,
                        branchValue: branchesController.selectedBranch.value,
                      ),
                    );
                  }
                  return Container();
                })
              : const SizedBox(),
          Expanded(child: Obx(() {
            if (newArrivalController.newArrivalLoading.isTrue &&
                newArrivalController.newArrivals.isEmpty) {
              return Center(
                child: LoadingWidgets.buttonLoading(
                    color: ColorThemes.primaryColorCode),
              );
            } else if (newArrivalController.appException != null &&
                newArrivalController.newArrivalLoading.isFalse &&
                newArrivalController.newArrivals.isEmpty) {
              return Center(
                child: TryAgainWidget(
                  message: newArrivalController.appException!.message!,
                  onPress: () {
                    if (widget.userData != null) {
                      newArrivalController.getNewArrivals(
                          widget.userData!.user!.branchCode ?? '');
                    } else {
                      newArrivalController.getNewArrivals('');
                    }
                  },
                  showButton:
                      newArrivalController.appException!.statusCode != 404,
                ),
              );
            } else if (newArrivalController.newArrivalLoading.isFalse &&
                newArrivalController.newArrivals.isEmpty) {
              return const Center(
                child: TryAgainWidget(
                  message: "No Results Found",
                  showButton: false,
                ),
              );
            } else if (newArrivalController.newArrivalLoading.isFalse &&
                newArrivalController.newArrivals.isNotEmpty) {
              return newArrivalController.isGrid.isTrue
                  ? ListView(
                      scrollDirection: Axis.vertical,
                      padding: EdgeInsets.symmetric(
                          horizontal: size.width * 0.05,
                          vertical: size.height * 0.015),
                      children: [
                        Wrap(
                          spacing: size.width * 0.025,
                          runSpacing: 10,
                          children: [
                            ...List.generate(
                              newArrivalController.newArrivals.length,
                              (index) => InkWell(
                                onTap: () {
                                  Navigator.push(
                                    context,
                                    SlideTransitionToRight(BookDetailsScreen(
                                      biblionumber: newArrivalController
                                          .newArrivals[index]
                                          .book
                                          .biblionumber!,
                                      branchcode: widget.userData == null
                                          ? branchCode
                                          : widget.userData!.user!.branchCode,
                                    )),
                                  );
                                },
                                child: Container(
                                  width: size.width * 0.437,
                                  padding: EdgeInsets.symmetric(
                                      horizontal: size.width * 0.025,
                                      vertical: size.height * 0.015),
                                  decoration: BoxDecoration(
                                      borderRadius: BorderRadius.circular(10),
                                      color: Colors.white,
                                      border: Border.all(
                                          color:
                                              Colors.black.withOpacity(0.05))),
                                  child: Column(
                                    children: [
                                      CoverImage(
                                        image: newArrivalController
                                            .newArrivals[index]
                                            .book
                                            .coverImage!,
                                        height: size.width * 0.45,
                                        width: size.width * 0.38,
                                      ),
                                      Text(
                                        newArrivalController
                                            .newArrivals[index].book.title!,
                                        maxLines: 1,
                                        overflow: TextOverflow.ellipsis,
                                        style: const TextStyle(
                                            fontSize: 16,
                                            fontWeight: FontWeight.w500,
                                            color: Colors.black),
                                      ),
                                      const SizedBox(
                                        height: 4,
                                      ),
                                      Text(
                                        newArrivalController
                                            .newArrivals[index].book.author!,
                                        textAlign: TextAlign.center,
                                        maxLines: 1,
                                        overflow: TextOverflow.ellipsis,
                                        style: const TextStyle(
                                          fontSize: 15,
                                          fontWeight: FontWeight.w400,
                                          color: Colors.grey,
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                              ),
                            ),
                          ],
                        ),
                      ],
                    )
                  : ListView.separated(
                      padding: const EdgeInsets.all(8),
                      separatorBuilder: (context, index) => const Divider(
                        height: 8,
                        color: Colors.transparent,
                      ),
                      itemCount: newArrivalController.newArrivals.length,
                      physics: const BouncingScrollPhysics(),
                      itemBuilder: (context, index) {
                        return InkWell(
                          onTap: () {
                            Navigator.push(
                              context,
                              SlideTransitionToRight(BookDetailsScreen(
                                biblionumber: newArrivalController
                                    .newArrivals[index].book.biblionumber!,
                                branchcode: widget.userData == null
                                    ? branchCode
                                    : widget.userData!.user!.branchCode,
                              )),
                            );
                          },
                          child: Container(
                            width: size.width * 0.437,
                            decoration: BoxDecoration(
                                borderRadius: BorderRadius.circular(10),
                                color: Colors.white,
                                border: Border.all(
                                    color: Colors.black.withOpacity(0.05))),
                            margin:
                                const EdgeInsets.only(right: 5.0, left: 5.0),
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.start,
                              crossAxisAlignment: CrossAxisAlignment.center,
                              children: [
                                CoverImage(
                                  image: newArrivalController
                                      .newArrivals[index].book.coverImage!,
                                  height: 110,
                                  width: 80,
                                ),
                                Expanded(
                                  child: Column(
                                    mainAxisSize: MainAxisSize.min,
                                    crossAxisAlignment:
                                        CrossAxisAlignment.start,
                                    children: [
                                      Text(
                                        newArrivalController.newArrivals[index]
                                                .book.title ??
                                            "",
                                        maxLines: 1,
                                        overflow: TextOverflow.ellipsis,
                                        style: const TextStyle(
                                            fontSize: 16,
                                            fontWeight: FontWeight.w500,
                                            color: Colors.black),
                                      ),
                                      Text(
                                        newArrivalController
                                            .newArrivals[index].book.author!,
                                        textAlign: TextAlign.center,
                                        maxLines: 1,
                                        overflow: TextOverflow.ellipsis,
                                        style: const TextStyle(
                                          fontSize: 15,
                                          fontWeight: FontWeight.w400,
                                          color: Colors.grey,
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                              ],
                            ),
                          ),
                        );
                      },
                    );
            }
            return Container();
          }))
        ],
      ),
    );
  }
}
