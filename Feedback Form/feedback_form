import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:ourlib/utils/color_themes.dart';
import 'package:ourlib/widgets/loading_widgets.dart';

import '../../controllers/show_suggestions_controller.dart';
import '../../controllers/suggestion_form_controller.dart';
import '../../data/models/app_config_model/app_config_model.dart';
import '../../data/models/suggestion_model/suggestion_model.dart';
import '../../data/models/user_model/user_model.dart';
import '../../utils/page_transition.dart';
import '../../widgets/try_again_widget.dart';
import '../home page/home_page.dart';
import 'suggestions_form_screen.dart';

class ShowSuggestion extends StatefulWidget {
  final AppConfigModel configData;
  final UserModel userData;
  const ShowSuggestion(
      {super.key, required this.userData, required this.configData});

  @override
  State<ShowSuggestion> createState() => _ShowSuggestionState();
}

class _ShowSuggestionState extends State<ShowSuggestion> {
  final ShowSuggestionsController showSuggestionsController =
      ShowSuggestionsController();
  final SuggestionFormController suggestionFormController =
      Get.put(SuggestionFormController());
  List<SuggestionModel> suggestionList = [];
  @override
  void initState() {
    showSuggestionsController.fetchSuggestions();
    super.initState();
  }

  Future<bool> onWillPop(bool getBack) async {
    Navigator.pushAndRemoveUntil(
        context,
        SlideTransitionToLeft(MyHomePage(
          appConfigModel: widget.configData,
          userData: widget.userData,
        )),
        (Route<dynamic> route) => false);

    return Future.value(getBack);
  }

  @override
  Widget build(BuildContext context) {
    Size size = MediaQuery.of(context).size;
    return PopScope(
      canPop: false,
      onPopInvoked: onWillPop,
      child: Scaffold(
        appBar: AppBar(
          title: const Text(
            "Suggestions",
          ),
          bottom: PreferredSize(
            preferredSize: const Size.fromHeight(1),
            child: Container(
              color: Colors.grey[300],
              height: 1,
            ),
          ),
        ),
        body: Obx(() {
          if (showSuggestionsController.isLoading.value &&
              showSuggestionsController.suggestions.isEmpty) {
            return Center(
              child: LoadingWidgets.buttonLoading(
                  color: ColorThemes.primaryColorCode),
            );
          } else if (showSuggestionsController.suggestions.isEmpty) {
            return Center(
              child: Text(
                "No Suggestions",
                style: TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.w400,
                    color: ColorThemes.textColorCode),
              ),
            );
          } else if (showSuggestionsController.appException != null &&
              showSuggestionsController.isLoading.isFalse &&
              showSuggestionsController.suggestions.isEmpty) {
            return Center(
              child: TryAgainWidget(
                message: showSuggestionsController.appException!.message!,
                onPress: () {
                  showSuggestionsController.fetchSuggestions();
                },
                showButton:
                    showSuggestionsController.appException!.statusCode != 404,
              ),
            );
          } else if (showSuggestionsController.isLoading.isFalse &&
              showSuggestionsController.suggestions.isEmpty) {
            return const Center(
              child: TryAgainWidget(
                message: "No Results Found",
                showButton: false,
              ),
            );
          }
          suggestionList = showSuggestionsController.suggestions;
          return ListView.builder(
              itemCount: suggestionList.length,
              itemBuilder: (context, index) {
                final data = showSuggestionsController.suggestions[index];
                return Container(
                  width: size.width * 0.437,
                  margin:
                      const EdgeInsets.symmetric(horizontal: 10, vertical: 5),
                  decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(10),
                      color: Colors.white,
                      border:
                          Border.all(color: Colors.black.withOpacity(0.05))),
                  child: Padding(
                    padding: EdgeInsets.symmetric(
                        horizontal: size.width * 0.04,
                        vertical: size.height * 0.01),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        data.title != null
                            ? RichText(
                                text: TextSpan(
                                  children: <TextSpan>[
                                    TextSpan(
                                      text: 'Title : ',
                                      style: TextStyle(
                                        fontSize: 18,
                                        fontWeight: FontWeight.w500,
                                        color: ColorThemes.textColorCode,
                                      ),
                                    ),
                                    TextSpan(
                                      text: "${data.title}",
                                      style: TextStyle(
                                        fontSize: 18,
                                        fontWeight: FontWeight.w500,
                                        color: ColorThemes.textColorCode,
                                      ),
                                    ),
                                  ],
                                ),
                              )
                            : const SizedBox(),
                        data.author != null && data.author!.isNotEmpty
                            ? RichText(
                                text: TextSpan(
                                  children: <TextSpan>[
                                    TextSpan(
                                      text: 'Author : ',
                                      style: TextStyle(
                                        fontSize: 14,
                                        color: ColorThemes.textColorCode,
                                      ),
                                    ),
                                    TextSpan(
                                      text: "${data.author}",
                                      style: TextStyle(
                                        fontSize: 14,
                                        color: ColorThemes.textColorCode,
                                      ),
                                    ),
                                  ],
                                ),
                              )
                            : const SizedBox(),
                        const SizedBox(
                          height: 2,
                        ),
                        data.sTATUS != null && data.sTATUS!.isNotEmpty
                            ? RichText(
                                text: TextSpan(
                                children: <TextSpan>[
                                  TextSpan(
                                    text: 'Status : ',
                                    style: TextStyle(
                                        fontSize: 14,
                                        color: ColorThemes.textColorCode,
                                        fontWeight: FontWeight.w400),
                                  ),
                                  TextSpan(
                                    text: "${data.sTATUS}",
                                    style: const TextStyle(
                                        fontSize: 14,
                                        color: Colors.green,
                                        fontWeight: FontWeight.w300),
                                  ),
                                ],
                              ))
                            : const SizedBox(),
                      ],
                    ),
                  ),
                );
              });
        }),
        floatingActionButton: FloatingActionButton(
          onPressed: () => suggestionForm(context),
          backgroundColor: ColorThemes.primaryColorCode,
          elevation: 0,
          child: const Icon(Icons.add, color: ColorThemes.whiteColor),
        ),
      ),
    );
  }

  Future<void> suggestionForm(BuildContext context) {
    return showModalBottomSheet<int>(
      context: context,
      isScrollControlled: true,
      builder: (BuildContext context) {
        return SingleChildScrollView(
          child: Container(
            padding: EdgeInsets.only(
                bottom: MediaQuery.of(context).viewInsets.bottom),
            child: SuggestionFormScreen(
              returnValue: (value) {
                if (value == 0) {
                  final mySuggestion = SuggestionModel(
                      title: suggestionFormController
                          .titleFieldController.value.text,
                      author: suggestionFormController
                          .authorFieldController.value.text,
                      isbn: suggestionFormController
                          .noteFieldController.value.text,
                      sTATUS: "ASKED");
                  setState(
                    () {
                      if (suggestionList.isEmpty) {
                        suggestionList.add(mySuggestion);
                      } else {
                        suggestionList.insert(0, mySuggestion);
                      }
                    },
                  );
                }
              },
            ),
          ),
        );
      },
    );
  }
}
