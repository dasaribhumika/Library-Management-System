import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:ourlib/data/models/app_config_model/app_config_model.dart';
import 'package:ourlib/views/book%20details/book_details_screen.dart';

import '../../controllers/reading_history_controller.dart';
import '../../data/models/user_model/user_model.dart';
import '../../utils/color_themes.dart';
import '../../utils/page_transition.dart';
import '../../widgets/cover_image.dart';
import '../../widgets/loading_widgets.dart';
import '../../widgets/try_again_widget.dart';
import '../home page/home_page.dart';

class ReadingHistoryScreen extends StatefulWidget {
  final UserModel userData;
  final AppConfigModel configModel;
  const ReadingHistoryScreen(
      {super.key, required this.userData, required this.configModel});

  @override
  State<ReadingHistoryScreen> createState() => _ReadingHistoryScreenState();
}

class _ReadingHistoryScreenState extends State<ReadingHistoryScreen> {
  ReadingHistoryController readingHistoryController =
      Get.put(ReadingHistoryController());

  @override
  void initState() {
    readingHistoryController.getReadingHistory(widget.userData.token!);
    super.initState();
  }

  Future<bool> onWillPop(bool getBack) async {
    Navigator.pushAndRemoveUntil(
        context,
        SlideTransitionToLeft(MyHomePage(
          appConfigModel: widget.configModel,
          userData: widget.userData,
        )),
        (Route<dynamic> route) => false);

    return Future.value(getBack);
  }

  @override
  Widget build(BuildContext context) {
    Size size = MediaQuery.of(context).size;
    return PopScope(
      canPop: false,
      onPopInvoked: onWillPop,
      child: Scaffold(
        appBar: AppBar(
          title: const Text(
            'Reading History',
          ),
          bottom: PreferredSize(
            preferredSize: const Size.fromHeight(1),
            child: Container(
              color: Colors.grey[300],
              height: 1,
            ),
          ),
        ),
        body: Obx(() {
          if (readingHistoryController.readingHistoryLoading.isTrue &&
              readingHistoryController.books.isEmpty) {
            return Center(
              child: LoadingWidgets.buttonLoading(
                  color: ColorThemes.primaryColorCode),
            );
          } else if (readingHistoryController.appException != null &&
              readingHistoryController.readingHistoryLoading.isFalse &&
              readingHistoryController.books.isEmpty) {
            return Center(
              child: TryAgainWidget(
                message: readingHistoryController.appException!.message!,
                onPress: () {
                  readingHistoryController
                      .getReadingHistory(widget.userData.token!);
                },
                showButton:
                    readingHistoryController.appException!.statusCode != 404,
              ),
            );
          } else if (readingHistoryController.readingHistoryLoading.isFalse &&
              readingHistoryController.books.isEmpty) {
            return const Center(
              child: TryAgainWidget(
                message: "No Results Found",
                showButton: false,
              ),
            );
          } else if (readingHistoryController.readingHistoryLoading.isFalse &&
              readingHistoryController.books.isNotEmpty) {
            return ListView.builder(
              itemCount: readingHistoryController.books.length,
              itemBuilder: (context, index) {
                final data = readingHistoryController.books[index];

                return InkWell(
                  onTap: () => Navigator.push(
                    context,
                    SlideTransitionToRight(BookDetailsScreen(
                      biblionumber:
                          readingHistoryController.books[index].biblionumber!,
                      branchcode: widget.userData.user!.branchCode!,
                    )),
                  ),
                  child: Container(
                    width: size.width * 0.437,
                    margin:
                        const EdgeInsets.symmetric(horizontal: 10, vertical: 5),
                    decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(10),
                        color: Colors.white,
                        border:
                            Border.all(color: Colors.black.withOpacity(0.05))),
                    child: Row(
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: [
                        CoverImage(
                          image: data.coverImage!,
                          width: size.width * 0.22,
                          height: size.width * 0.3,
                        ),
                        Expanded(
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              Text(
                                data.title!.trim(),
                                maxLines: 2,
                                overflow: TextOverflow.ellipsis,
                                style: const TextStyle(
                                    fontSize: 16,
                                    fontWeight: FontWeight.w500,
                                    color: Colors.black),
                              ),
                              Text(
                                'Issue Date: ${data.issueDate!.trim()}',
                                maxLines: 1,
                                overflow: TextOverflow.ellipsis,
                                style: const TextStyle(
                                    fontSize: 16,
                                    fontWeight: FontWeight.w400,
                                    color: Colors.black54),
                              ),
                              Text(
                                'Return Date: ${data.returnDate!.trim()}',
                                maxLines: 1,
                                overflow: TextOverflow.ellipsis,
                                style: const TextStyle(
                                    fontSize: 16,
                                    fontWeight: FontWeight.w400,
                                    color: Colors.black54),
                              ),
                              Text(
                                'Status: ${data.status!.trim()}',
                                maxLines: 1,
                                overflow: TextOverflow.ellipsis,
                                style: const TextStyle(
                                    fontSize: 16,
                                    fontWeight: FontWeight.w400,
                                    color: Colors.black54),
                              ),
                            ],
                          ),
                        ),
                      ],
                    ),
                  ),
                );
              },
            );
          }
          return Container();
        }),
      ),
    );
  }
}